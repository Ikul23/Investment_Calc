require("dotenv").config();
const express = require("express");
const cors = require("cors");
const path = require("path");
const bodyParser = require("body-parser");
const errorHandler = require("./middleware/errorHandler");
const requestLogger = require("./middleware/requestLogger");
const sequelize = require("./config/database");

const app = express();

// –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
const routes = require("./routes");

app.use(cors({
  origin: process.env.CLIENT_URL || "http://localhost:5173",
  credentials: true,
}));

app.use(express.json());
app.use(requestLogger);
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api', routes);

// –¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç
app.get("/api/test", (req, res) => {
  res.json({ message: "–ë—ç–∫–µ–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç!" });
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (Frontend)
app.use(express.static(path.join(__dirname, "client/dist")));
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "client/dist", "index.html"));
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use(errorHandler);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (–ª—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ)
app.use((err, req, res, next) => {
  console.error("‚ùå –û—à–∏–±–∫–∞:", err.message);
  console.error("üìå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:", err.stack);
  res.status(err.status || 500).json({ message: err.message || "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º `app` –¥–ª—è —Ç–µ—Å—Ç–æ–≤
module.exports = app;

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if (require.main === module) {
  const PORT = process.env.PORT || 5000;

  sequelize.sync({ alter: true })
    .then(() => {
      console.log("‚úÖ –ú–æ–¥–µ–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
      const server = app.listen(PORT, () => {
        console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      });

      process.on("SIGTERM", async () => {
        console.log("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...");
        await sequelize.close();
        server.close(() => {
          console.log("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
          process.exit(0);
        });
      });
    })
    .catch((err) => console.error("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π:", err));
}
