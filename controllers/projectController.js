const db = require("../models");
const { Project, CashFlow, FinancialResult } = db;
const { sequelize } = db;
const { calculateNPV } = require("../services/calculationService");

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
const getProjects = async (req, res) => {
    try {
        const projects = await Project.findAll({
            include: [
                { 
                    model: CashFlow,
                    attributes: ['id', 'year'] 
                },
                {
                    model: FinancialResult,
                    attributes: ['id', 'npv', 'irr']
                }
            ],
            order: [['createdAt', 'DESC']]
        });
        
        res.status(200).json(projects);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:", error);
        res.status(500).json({ 
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤",
            error: process.env.NODE_ENV === 'development' ? error.message : null
        });
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
const getProjectById = async (req, res) => {
    try {
        const project = await Project.findByPk(req.params.id, {
            include: [
                {
                    model: CashFlow,
                    attributes: { exclude: ['createdAt', 'updatedAt'] },
                    order: [['year', 'ASC']]
                },
                {
                    model: FinancialResult,
                    attributes: { exclude: ['createdAt', 'updatedAt'] }
                }
            ]
        });

        if (!project) {
            return res.status(404).json({ message: "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç NPV –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (!project.financialResult) {
            const npv = calculateNPV(project.cashFlows, project.discountRate || 0.25);
            project.dataValues.npv = npv;
        }
if (isNaN(discountRate) || discountRate <= 0) {
    return res.status(400).json({
        message: "–°—Ç–∞–≤–∫–∞ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
    });
}
        res.status(200).json(project);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:", error);
        res.status(500).json({ 
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞",
            error: process.env.NODE_ENV === 'development' ? error.message : null
        });
    }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
const createProject = async (req, res) => {
    const t = await sequelize.transaction();
    try {
        const { name, years = 5 } = req.body;
        const discountRate = 0.25;  // üîπ –§–∏–∫—Å–∏—Ä—É–µ–º –¥–∏—Å–∫–æ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É
        const usefulLifeYears = 7;  // üîπ –§–∏–∫—Å–∏—Ä—É–µ–º —Å—Ä–æ–∫ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

        if (!name || !years) {
            await t.rollback();
            return res.status(400).json({ 
                message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Ä–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞" 
            });
        }

        const project = await Project.create({
            name,
            discountRate,
            years,
            opex: 0,  
            capex: 0,
            revenue: 0
        }, { transaction: t });

        const cashFlows = calculateCashFlow(0, 0, 0, usefulLifeYears)
            .map(flow => ({ ...flow, projectId: project.id }));

        await CashFlow.bulkCreate(cashFlows, { transaction: t });

        const financialResults = calculateFinancialResults(cashFlows, discountRate);
        await FinancialResult.create({
            projectId: project.id,
            npv: financialResults.npv,
            irr: financialResults.irr,
            dpbp: financialResults.dpbp
        }, { transaction: t });

        await t.commit();
        res.status(201).json({ project, cashFlows, financialResults });
    } catch (error) {
        await t.rollback();
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:", error);
        res.status(500).json({ 
            message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            error: process.env.NODE_ENV === 'development' ? error.message : null
        });
    }
};
// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const deleteProject = async (req, res) => {
    const t = await sequelize.transaction();
    try {
        const deleted = await Project.destroy({
            where: { id: req.params.id },
            transaction: t
        });

        if (!deleted) {
            await t.rollback();
            return res.status(404).json({ message: "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        // –ö–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await CashFlow.destroy({ 
            where: { projectId: req.params.id },
            transaction: t
        });

        await FinancialResult.destroy({
            where: { projectId: req.params.id },
            transaction: t
        });

        await t.commit();
        res.status(200).json({ message: "–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω" });
    } catch (error) {
        await t.rollback();
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:", error);
        res.status(500).json({
            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞",
            error: process.env.NODE_ENV === 'development' ? error.message : null
        });
    }
};

module.exports = {
    getProjects,
    getProjectById,
    createProject,
    deleteProject
};